name: Deploy to production

on:
  push:
    tags:
      - "*"

env:
  BALENA_CLI_VERSION: 14.5.15
  BALENA_FLEET: bdi/starter-interface
  GHCR_IMAGE_NAME: balena-labs-research/bsi

jobs:
  deploy-to-bcr:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Update balena.yml
        uses: balena-io-experimental/balena.yml-action@main
        with:
          sync_readme: true
          sync_tag: true

      - name: Push to BCR
        uses: balena-labs-research/community-cli-action@1.0.0
        with:
          balena_token: ${{secrets.BALENA_TOKEN}}
          balena_cli_commands: >
            push ${{ env.BALENA_FLEET }};
          balena_cli_version: ${{ env.BALENA_CLI_VERSION }}

  preload:
    needs: [deploy-to-bcr]
    timeout-minutes: 60
    strategy:
      fail-fast: true
      matrix:
        job_name:
          [
            "cm4-dev",
            "rpi-3-dev",
            "rpi-4-dev",
            "rpi-zero-2-dev",
            "cm4-prod",
            "rpi-3-prod",
            "rpi-4-prod",
            "rpi-zero-2-prod",
          ]

        include:
          - job_name: cm4-dev
            device: raspberrypicm4-ioboard
            version: "latest"
            filename: Balena-Starter-Interface-rpi-cm4-image-dev
            developmentMode: true

          - job_name: rpi-3-dev
            device: raspberrypi3-64
            version: "latest"
            filename: Balena-Starter-Interface-rpi3-image-dev
            developmentMode: true

          - job_name: rpi-4-dev
            device: raspberrypi4-64
            version: "latest"
            filename: Balena-Starter-Interface-rpi4-image-dev
            developmentMode: true

          - job_name: rpi-zero-2-dev
            device: raspberrypi0-2w-64
            version: "latest"
            filename: Balena-Starter-Interface-rpi-zero-2-image-dev
            developmentMode: true

          - job_name: cm4-prod
            device: raspberrypicm4-ioboard
            version: "latest"
            filename: Balena-Starter-Interface-rpi-cm4-image-prod
            developmentMode: false

          - job_name: rpi-3-prod
            device: raspberrypi3-64
            version: "latest"
            filename: Balena-Starter-Interface-rpi3-image-prod
            developmentMode: false

          - job_name: rpi-4-prod
            device: raspberrypi4-64
            version: "latest"
            filename: Balena-Starter-Interface-rpi4-image-prod
            developmentMode: false

          - job_name: rpi-zero-2-prod
            device: raspberrypi0-2w-64
            version: "latest"
            filename: Balena-Starter-Interface-rpi-zero-2-image-prod
            developmentMode: false

    name: preload-${{ matrix.job_name }}

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Download image
        shell: bash
        run: |
          wget -q -O ./${{ matrix.filename }}.zip \
          'https://api.balena-cloud.com/download?deviceType=${{ matrix.device }}&version=${{ matrix.version }}&developmentMode=${{ matrix.developmentMode }}&fileType=.zip' && \
          unzip ${{ matrix.filename }}.zip && \
          mv *.img ${{ matrix.filename }}.img

      - name: Preload image
        uses: balena-labs-research/community-cli-action@1.0.0
        with:
          balena_token: ${{secrets.BALENA_TOKEN}}
          balena_cli_commands: >
            preload ${{ matrix.filename }}.img --fleet ${{ env.BALENA_FLEET }} --commit latest;
          balena_cli_version: ${{ env.BALENA_CLI_VERSION }}

      - name: Compress
        shell: bash
        run: |
          tar -czf ${{ matrix.filename }}.tar.gz ./${{ matrix.filename }}.img

      - name: Upload file
        uses: actions/upload-artifact@v3
        with:
          name: images
          path: ${{ matrix.filename }}.tar.gz

  build-electron-app:
    timeout-minutes: 60
    env:
      ON_DEVICE: false
    strategy:
      fail-fast: true
      matrix:
        job_name: ["linux", "mac_amd64", mac_arm64, "windows"]

        include:
          - job_name: linux
            os: ubuntu-latest

          - job_name: mac_amd64
            os: macos-latest
            apple_signing: true

          - job_name: mac_arm64
            os: macos-latest
            build_arch: --arch arm64
            apple_signing: true

          - job_name: windows
            os: windows-latest

    name: ${{ matrix.job_name }}

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "18.12.1"
          cache: "yarn"

      - name: Install the Apple certificates
        if: ${{ matrix.apple_signing }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install UI packages
        run: |
          yarn install --immutable

      - name: Install builder packages
        run: |
          yarn install --immutable --cwd builder/

      - name: Build Electron App
        env:
          # ELECTRON_SKIP_NOTARIZATION: true
          XCODE_APP_LOADER_EMAIL: ${{ secrets.XCODE_APP_LOADER_EMAIL }}
          XCODE_APP_LOADER_PASSWORD: ${{ secrets.XCODE_APP_LOADER_PASSWORD }}
        run: yarn build-electron ${{ matrix.build_arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.job_name }}
          path: |
            ui/dist/electron/Packaged/Balena Starter Interface*.exe
            ui/dist/electron/Packaged/Balena Starter Interface*.dmg
            ui/dist/electron/Packaged/Balena Starter Interface*.AppImage

  deploy-to-ghcr:
    needs: [deploy-to-bcr]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ env.GHCR_IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [deploy-to-bcr, deploy-to-ghcr, preload, build-electron-app]
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v3

      - name: Create production changeLog and release
        uses: "balena-io-experimental/automatic-release-action@stable"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            images/*
            mac_amd64/*
            mac_arm64/*
            linux/*
            windows/*

