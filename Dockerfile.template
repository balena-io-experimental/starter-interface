## Build ExpressJS node_modules
## Done here to stop yarn leaving cache and other litter in the final container
FROM node:16.13.2-alpine3.14 AS ejs-node-build

ENV NODE_ENV=production

WORKDIR /build-context

COPY expressjs/package.json .
COPY expressjs/yarn.lock .

# The network timeout prevents build timeouts when building on devices with slow SD cards
RUN yarn install --network-timeout 600000 --frozen-lockfile


## Build ExpressJS UI
## Uses ejs-node-build container to benefit from already installed packages and cache
FROM ejs-node-build AS ejs-ui-build

# Switch to development context to install required packages for build
ENV NODE_ENV=development

# The network timeout prevents build timeouts when building on devices with slow SD cards
RUN yarn install --network-timeout 600000 --frozen-lockfile

# Copy source files to container
COPY expressjs .

# Run lint to ensure build fails if there are coding issues
RUN yarn lint

RUN yarn build


## Build user interface
FROM node:16.13.2-alpine3.14 AS ui-build-step

WORKDIR /build-context

COPY ui/package.json .
COPY ui/yarn.lock .

# The network timeout prevents build timeouts when building on devices with slow SD cards
RUN yarn install --network-timeout 600000 --frozen-lockfile

COPY ui .

RUN yarn build


## Compile container
FROM node:16.13.2-alpine3.14

ENV NODE_ENV=production

WORKDIR /app

# Copy ExpressJS node_modules in to container
COPY --from=ejs-node-build /build-context/node_modules node_modules

# Copy ExpressJS build in to container
COPY --from=ejs-ui-build /build-context/dist .

# Copy UI in to container 
COPY --from=ui-build-step /build-context/dist/spa public

# Copy startup scripts
COPY scripts .

# Run the start script
CMD ["sh", "start.sh"]
